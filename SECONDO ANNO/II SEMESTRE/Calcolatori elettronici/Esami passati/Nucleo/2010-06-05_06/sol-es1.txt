******************************************
* sistema/sistema.s
******************************************

	// ( SOLUZIONE 2010-06-05 #1
	carica_gate	TIPO_MW		a_mutex_wait	LIV_UTENTE
	carica_gate	TIPO_MS		a_mutex_signal	LIV_UTENTE
	//   SOLUZIONE 2010-06-05 )
// ( SOLUZIONE 2010-06-05
a_mutex_wait:
	.cfi_startproc
	.cfi_def_cfa_offset 40
	.cfi_offset rip, -40
	.cfi_offset rsp, -16
	call salva_stato
	call c_mutex_wait
	call carica_stato
	iretq
	.cfi_endproc

a_mutex_signal:
	.cfi_startproc
	.cfi_def_cfa_offset 40
	.cfi_offset rip, -40
	.cfi_offset rsp, -16
	call salva_stato
	call c_mutex_signal
	call carica_stato
	iretq
	.cfi_endproc
//   SOLUZIONE 2010-06-05 )


******************************************
* sistema/sistema.cpp
******************************************

// ( SOLUZIONE 2010-06-05 

bool mutex_valido(natl mux);
extern "C" void c_mutex_wait(natl mux)
{
	des_mutex *m;

	if (!mutex_valido(mux)) {
		flog(LOG_WARN, "mutex errato: %d", mux);
		c_abort_p();
		return;
	}
	
	m = &array_desm[mux];

	if (m->owner == esecuzione->id) {
		flog(LOG_WARN, "mutex_wait ricorsiva");
		c_abort_p();
		return;
	}

	if (m->owner == 0) {
		m->owner = esecuzione->id;
	} else {
		inserimento_lista(m->waiting, esecuzione);
		schedulatore();
	}
}

extern "C" void c_mutex_signal(natl mux)
{
	des_mutex *m;

	if (!mutex_valido(mux)) {
		flog(LOG_WARN, "mutex errato: %d", mux);
		c_abort_p();
		return;
	}

	m = &array_desm[mux];

	if (m->owner != esecuzione->id) {
		flog(LOG_WARN, "mutex_signal su mutex errato");
		c_abort_p();
		return;
	}

	if (m->waiting != 0) {
		des_proc *lavoro = rimozione_lista(m->waiting);
		m->owner = lavoro->id;
		// possibile preemption
		inspronti();
		inserimento_lista(pronti, lavoro);
		schedulatore();
	} else {
		m->owner = 0;
	}
}


// SOLUZIONE 2010-06-05 )


