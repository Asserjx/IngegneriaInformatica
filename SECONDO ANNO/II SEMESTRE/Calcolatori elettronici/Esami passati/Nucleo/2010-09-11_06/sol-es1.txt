******************************************
* sistema/sistema.s
******************************************

// ( SOLUZIONE 2010-09-11
	carica_gate	TIPO_MW		a_monitor_wait	LIV_UTENTE
	carica_gate	TIPO_MS		a_monitor_notifyAll	LIV_UTENTE
// SOLUZIONE 2010-09-11 )
// ( SOLUZIONE 2010-09-11

a_monitor_wait:
	.cfi_startproc
	.cfi_def_cfa_offset 40
	.cfi_offset rip, -40
	.cfi_offset rsp, -16
	call salva_stato
	call c_monitor_wait
	call carica_stato
	iretq
	.cfi_endproc

a_monitor_notifyAll:
	.cfi_startproc
	.cfi_def_cfa_offset 40
	.cfi_offset rip, -40
	.cfi_offset rsp, -16
	call salva_stato
	call c_monitor_notifyAll
	call carica_stato
	iretq
	.cfi_endproc
//   SOLUZIONE 2010-09-11 )


******************************************
* sistema/sistema.cpp
******************************************

// ( SOLUZIONE 2010-09-11

extern "C" void c_monitor_wait(natl mon)
{
	if (!monitor_valido(mon)) {
		flog(LOG_WARN, "monitor non valido: %d", mon);
		c_abort_p();
		return;
	}

	des_monitor *p_des = &array_desm[mon];

	if (p_des->owner != esecuzione->id) {
		flog(LOG_WARN, "monitor_wait errata");
		c_abort_p();
		return;
	}

	inserimento_lista(p_des->w_cond, esecuzione);
	if (p_des->w_enter != 0) {
		des_proc *work = rimozione_lista(p_des->w_enter);
		p_des->owner = work->id;
		inserimento_lista(pronti, work);
	} else {
		p_des->owner = 0;
	}
	schedulatore();
}

extern "C" void c_monitor_notifyAll(natl mon)
{
	if (!monitor_valido(mon)) {
		flog(LOG_WARN, "monitor non valido: %d", mon);
		c_abort_p();
		return;
	}

	des_monitor *p_des = &array_desm[mon];

	if (p_des->owner != esecuzione->id) {
		flog(LOG_WARN, "monitor_notifyAll errata");
		c_abort_p();
		return;
	}

	inspronti();
	while (p_des->w_cond != 0) {
		des_proc *work = rimozione_lista(p_des->w_cond);
		inserimento_lista(pronti, work);
	}
	schedulatore();
}

// SOLUZIONE 2010-09-11 )


