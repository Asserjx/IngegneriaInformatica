******************************************
* sistema/sistema.s
******************************************

// ( SOLUZIONE 2020-06-18
	carica_gate	TIPO_NEWGRP	a_newgrp	LIV_UTENTE
	carica_gate	TIPO_LEAVEGRP	a_leavegrp	LIV_UTENTE
	carica_gate	TIPO_JOINGRP	a_joingrp	LIV_UTENTE
	carica_gate	TIPO_WAITGRP	a_waitgrp	LIV_UTENTE
//   SOLUZIONE 2020-06-18 )
// ( SOLUZIONE 2020-06-18
	.extern c_newgrp
a_newgrp:
	.cfi_startproc
	.cfi_def_cfa_offset 40
	.cfi_offset rip, -40
	.cfi_offset rsp, -16
	call salva_stato
	call c_newgrp
	call carica_stato
	iretq
	.cfi_endproc

	.extern c_leavegrp
a_leavegrp:
	.cfi_startproc
	.cfi_def_cfa_offset 40
	.cfi_offset rip, -40
	.cfi_offset rsp, -16
	call salva_stato
	call c_leavegrp
	call carica_stato
	iretq
	.cfi_endproc

	.extern c_joingrp
a_joingrp:
	.cfi_startproc
	.cfi_def_cfa_offset 40
	.cfi_offset rip, -40
	.cfi_offset rsp, -16
	call salva_stato
	call c_joingrp
	call carica_stato
	iretq
	.cfi_endproc

	.extern a_waitgrp
a_waitgrp:
	.cfi_startproc
	.cfi_def_cfa_offset 40
	.cfi_offset rip, -40
	.cfi_offset rsp, -16
	call salva_stato
	call c_waitgrp
	call carica_stato
	iretq
	.cfi_endproc
//   SOLUZIONE 2020-06-18 )


******************************************
* sistema/sistema.cpp
******************************************

// ( SOLUZIONE 2020-06-18 #1
//   SOLUZIONE 2020-06-18 )
// ( SOLUZIONE 2020-06-18 #2
	// gruppo a cui appartiene il processo, 0xFFFFFFFF se nessuno
	natl grp_id;
//   SOLUZIONE 2020-06-18 )
// ( SOLUZIONE 2020-06-18 #3
	// inizialmente il proceso non appartiene a nessun gruppo
	p->grp_id = 0xFFFFFFFF;
//   SOLUZIONE 2020-06-18 )
// ( SOLUZIONE 2020-06-18 #4
// definita più avanti
void leavegrp(bool terminating);
//   SOLUZIONE 2020-06-18 )
// ( SOLUZIONE 2020-06-18 #5
	leavegrp(true /* terminating */);
	// schedulatore() viene chiamato poco piu' avanti
//   SOLUZIONE 2020-06-18 )
// ( SOLUZIONE 2020-06-18 #6
struct grp_des {
	// numero di processi che appartengono al gruppo
	natl nproc;
	// processi in attesa che uno dei processi del gruppo termini
	des_proc *waiting;
};
grp_des array_grp[MAX_GRP];

// restuisce l'indice del primo gruppo vuoto, o 0xFFFFFFFF se sono tutti pieni
natl first_empty_grp()
{
	natl gid;

	for (gid = 0; gid < MAX_GRP; gid++)
		if (!array_grp[gid].nproc)
			break;
	if (gid == MAX_GRP)
		return 0xFFFFFFFF;
	return gid;
}

// funzione che rimuove il processo in esecuzione del suo gruppo.
// Se 'terminating' è true la rimozione è dovuta alla terminazione o aborto
// del processo, altrimenti all'invocazione di newgrp() o leavegrp().
// Se il processo non appartiene a nessun gruppo, la funzione non fa niente.
void leavegrp(bool terminating)
{
	if (esecuzione->grp_id == 0xFFFFFFFF) {
		// nessun gruppo
		return;
	}

	grp_des *g = &array_grp[esecuzione->grp_id];
	g->nproc--;
	esecuzione->grp_id = 0xFFFFFFFF;
	// sia se il processo sta terminando, sia se il gruppo si è
	// svuotato, bisogna fare la stessa cosa: risvegliare tutti
	// i processi in attesa sul gruppo. Cambia solo il valore
	// da restituirgli: esecuzione->id in caso di terminating e
	// 0xFFFFFFFF in caso di gruppo svuotato.
	if (terminating || !g->nproc) {
		while (g->waiting) {
			des_proc *p = rimozione_lista(g->waiting);
			p->contesto[I_RAX] = (terminating ? esecuzione->id : 0xFFFFFFFF);
			inserimento_lista(pronti, p);
		}
	}
	// il chiamante dovrà pensare a chiamare schedulatore()
}

extern "C" void c_newgrp()
{
	natl gid = first_empty_grp();

	// dobbiamo abbandonare l'eventuale gruppo corrente,
	// ma solo se l'allocazione ha avuto successo
	if (gid != 0xFFFFFFFF) {

		// leavegrp potrebbe spostare dei processi in coda pronti.
		// Per gestire la preemption inseriamo anche esecuzione
		// e poi chiamiamo schedulatore()
		inspronti();
		leavegrp(false /* !terminating */);
		schedulatore();

		// entriamo nel nuovo gruppo
		esecuzione->grp_id = gid;
		array_grp[gid].nproc++;
	}
	// in ogni caso restituiamo gid, anche se vale 0xFFFFFFFF
	esecuzione->contesto[I_RAX] = gid;
}

extern "C" void c_leavegrp()
{
	// errore se il processo non appartiene a un gruppo
	if (esecuzione->grp_id == 0xFFFFFFFF) {
		flog(LOG_WARN, "no group to leave");
		c_abort_p();
		return;
	}

	// come sopra
	inspronti();
	leavegrp(false /* !terminating */);
	schedulatore();
}

extern "C" void c_joingrp(natl gid)
{
	// errore se gid non è valido
	if (gid >= MAX_GRP) {
		flog(LOG_WARN, "invalid group id: %d", gid);
		c_abort_p();
		return;
	}
	// errore se il processo appartiene già ad un gruppo
	if (esecuzione->grp_id != 0xFFFFFFFF) {
		flog(LOG_WARN, "already in group: %d", esecuzione->grp_id);
		c_abort_p();
		return;
	}
	grp_des *g = &array_grp[gid];
	// la primitiva fallisce se il gruppo non è attivo
	if (!g->nproc) {
		esecuzione->contesto[I_RAX] = (natq)false;
		return;
	}
	// ok, entriamo nel gruppo
	esecuzione->grp_id = gid;
	g->nproc++;
	esecuzione->contesto[I_RAX] = (natq)true;
}

extern "C" void c_waitgrp(natl gid)
{
	// errore se gid non è valido
	if (gid >= MAX_GRP) {
		flog(LOG_WARN, "invalid group id: %d", gid);
		c_abort_p();
		return;
	}

	grp_des *g = &array_grp[gid];

	// se il gruppo è vuoto restituiamo subito 0xFFFFFFFF
	if (!g->nproc) {
		esecuzione->contesto[I_RAX] = 0xFFFFFFFF;
		return;
	}

	// altrimenti blocchiamo il processo
	inserimento_lista(g->waiting, esecuzione);
	schedulatore();
}
//   SOLUZIONE 2020-06-18 )


