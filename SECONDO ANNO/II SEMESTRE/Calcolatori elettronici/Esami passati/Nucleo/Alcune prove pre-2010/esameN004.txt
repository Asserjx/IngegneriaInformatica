Esame di Calcolatori Elettronici
Ingegneria Informatica -Appello del 29/05/2002

Sia data la seguente dichiarazione, contenuta nel file cc.h:
	#include <iostream.h>
	struct st1 { int vv1[4]; int vv2[8]; };
	struct st2 { double vv1[4]; double vv2[8]; };
	class cl
	{	st1 s1; st2 s2; int n;
	public:
		cl(st1 ss);
		cl(cl& cla);
		cl elab1(st1 ss);
		void elab2(st2 ss, cl& cla);
		void stampa()
		{	int i;
			cout << n << endl;
			for (i=0;i<4;i++) cout << s1.vv1[i] << ' ' ; cout << '\t';
			for (i=0;i<8;i++) cout << s1.vv2[i] << ' ' ; cout << endl;
			for (i=0;i<4;i++) cout << s2.vv1[i] << ' ' ; cout << '\t';
			for (i=0;i<8;i++) cout << s2.vv2[i] << ' ' ; cout << endl;
			cout << endl;
		}
	};

Esercizio 1)
Realizzare in Assembler DJGPP le funzioni membro seguenti (scrivere sul file es1.s; tradurre, 
collegare ed eseguire utilizzando i comandi indicati nelle avvertenze):
	#include "cc.h"
	cl::cl(st1 ss)
	{	int i;
		n = 1;
		for (i=0; i<4; i++) { s1.vv1[i] = ss.vv1[i]+1; s2.vv1[i] = 0; }
		for (i=0; i<8; i++) { s1.vv2[i] = 2*ss.vv2[i]; s2.vv2[i] = 0; }
	}
	cl::cl(cl& cla)
	{	*this = cla;
		n++;
	}
	cl cl::elab1(st1 ss)
	{	int i;
		cl cla(*this);
		for (i=0;i<4;i++)cla.s1.vv1[i] += ss.vv1[i];
		for (i=0;i<8;i++)cla.s1.vv2[i] += ss.vv2[i];
		return cla;
	}

Esercizio 2)
Realizzare in Assembler DJGPP la funzione membro seguente (scrivere sul file es2.s; tradurre, 
collegare ed eseguire utilizzando i comandi indicati nelle avvertenze):
	#include "cc.h"
	void cl::elab2(st2 ss, cl& cla)
	{	int i;
		for (i=0;i<4;i++)
			if (ss.vv1[i] < s1.vv1[i]) cla.s2.vv1[i] = ss.vv1[i] + s1.vv1[i];
			else cla.s2.vv1[i] = 2*ss.vv1[i];
		for (i=0;i<8;i++)
			if (ss.vv2[i] < s1.vv2[i]) cla.s2.vv2[i] = ss.vv2[i] + s1.vv2[i];
			else cla.s2.vv2[i] = 2*ss.vv2[i];
	}



Soluzioni


# es1.s
.text
.globl ___2clG3st1
___2clG3st1:
	pushl 	%ebp
	movl 	%esp, %ebp
	subl 	$4, %esp
	pushl 	%ebx
	pushl 	%ecx
	popl	%edx
	movl 	8(%ebp),%edx		# indirizzo oggetto
	movl 	$1, 144(%edx)		# n
	movl 	$0, -4(%ebp)		# i
ciclo1:	cmpl 	$4, -4(%ebp)
	jl 	avan1
	jmp 	finec1
avan1:	movl 	-4(%ebp), %ecx
	movl 	12(%ebp,%ecx,4), %ebx	# ss.v1[i]
	incl 	%ebx
	movl 	%ebx,(%edx,%ecx,4)		# s1.vv1[i]
	movl 	$0,48(%edx,%ecx,8)		# s2.vv1[i]
	movl 	$0,52(%edx,%ecx,8)	
	incl 	-4(%ebp)
	jmp 	ciclo1
finec1:	movl 	$0,-4(%ebp)
ciclo2:	cmpl 	$8,-4(%ebp)
	jl 	avan2
	jmp 	finec2
avan2:	movl 	-4(%ebp),%ecx
	movl 	28(%ebp,%ecx,4), %ebx	# ss.v2[i]
	addl 	28(%ebp,%ecx,4), %ebx
	movl 	%ebx, 16(%edx,%ecx,4)	# s1.vv2[i]
	movl 	$0,80(%edx,%ecx,8)		# s2.vv2[i]
	movl 	$0,84(%edx,%ecx,8)
	incl 	-4(%ebp)
	jmp 	ciclo2
finec2:	movl 	%edx, %eax
	popl	%edx
	popl 	%ecx
	popl 	%ebx
	leave
	ret

.globl ___2clR2cl
___2clR2cl:
	pushl 	%ebp
	movl 	%esp, %ebp
	pushl	%ecx
	pushl 	%edi
	pushl 	%esi
	
	movl 	12(%ebp), %esi		# indirizzo cla
	movl 	8(%ebp), %edi		# indirizzo oggetto
	cld
	movl 	$37,%ecx
	rep
	movsl				
	movl	8(%ebp), %eax		# indirizzo oggetto
	incl	144(%eax)			# n
	popl 	%esi
	popl 	%edi
	popl	%ecx
	leave
	ret

.globl _elab1__2clG3st1
_elab1__2clG3st1:
	pushl 	%ebp
	movl 	%esp, %ebp
	subl 	$152, %esp		# i (4 byte), cla (148 byte)
	pushl 	%ebx
	pushl	%ecx
	movl 	8(%ebp), %ebx		# indirizzo risultato
	movl 	12(%ebp), %eax		# indirizzo ogggetto
	pushl 	%eax
	leal 	-152(%ebp), %eax		# indirizzo cla
	pushl 	%eax
	call 	___2clR2cl
	addl 	$8, %esp
	movl 	$0, -4(%ebp)
cic1:	cmpl 	$4, -4(%ebp)
	jl 	ava1
	jmp 	fic1
ava1:	movl 	-4(%ebp), %ecx
	movl 	-152(%ebp,%ecx,4), %eax	# cla.s1.vv1[i]
	addl 	16(%ebp,%ecx,4), %eax	# ss.vv1[i]
	movl 	%eax, -152(%ebp,%ecx,4)	# cla.s1.vv1[i] 
	incl 	-4(%ebp)
	jmp 	cic1
fic1:	movl 	$0, -4(%ebp)
cic2:	cmpl 	$8, -4(%ebp)
	jl 	ava2
	jmp 	fic2
ava2:	movl 	-4(%ebp), %ecx
	movl 	-136(%ebp,%ecx,4), %eax	# cla.s1.vv2[i]
	addl 	32(%ebp,%ecx,4), %eax	# ss.vv2[i]
	movl 	%eax,-136(%ebp,%ecx,4)	# cla.s1.vv2[]
	incl 	-4(%ebp)
	jmp 	cic2
fic2:	leal 	-152(%ebp), %eax		# indirizzo cla
	pushl 	%eax
	pushl 	%ebx			# indirizzo risultato
	call 	___2clR2cl
	addl 	$8, %esp
	movl 	%ebx, %eax
	popl 	%ecx
	popl 	%ebx
	leave
	ret


# es2.s
.text
.globl _elab2__2clG3st2R2cl
_elab2__2clG3st2R2cl:
	pushl 	%ebp
	movl 	%esp, %ebp
	subl 	$4, %esp			# i
	pushl 	%eax
	pushl 	%ebx
	pushl	%ecx
	pushl	%edx
	movl 	$0, -4(%ebp)
ciclo1:	cmpl 	$4, -4(%ebp)
	jl 	avan1
	jmp 	finec1
avan1:	movl 	-4(%ebp), %ecx		# i
	movl 	8(%ebp), %ebx		# indirizzo oggetto
	fildl 	(%ebx,%ecx,4)		# s1.vv1[i]
	fldl 	12(%ebp,%ecx,8)		# ss.vv1[i]
	fcompp
	fstsw 	%ax
	testw 	$0x0100, %ax		# salta se ST maggiore o uguale
	jz 	else1
	movl 	108(%ebp), %edx		# indirizzo cla
	fildl 	(%ebx,%ecx,4)		# s1.vv1[i]
	faddl 	12(%ebp,%ecx,8)		# ss.vv1[i]
	fstpl 	48(%edx,%ecx,8)		# cla.s2.vv1[i]
	jmp 	ripet1
else1:	fldl 	12(%ebp,%ecx,8)		# ss.vv1[i]
	faddl 	12(%ebp,%ecx,8)	
	fstpl 	48(%edx,%ecx,8)		# cla.s2.vv1[i]
ripet1:	incl 	-4(%ebp)
	jmp 	ciclo1
finec1:	movl 	$0, -4(%ebp)
ciclo2:	cmpl 	$8, -4(%ebp)
	jl 	avan2
	jmp 	finec2
avan2:	movl 	-4(%ebp), %ecx
	movl 	8(%ebp), %ebx		# indirizzo oggetto
	fildl 	16(%ebx,%ecx,4)		# s1.vv2[i]
	fldl 	44(%ebp,%ecx,8)		# ss.v2[i]
	fcompp
	fstsw 	%ax
	testw 	$0x0100, %ax
	jz 	else2
	movl 	108(%ebp),%edx		# indirizzo cla
	fildl 	16(%ebx,%ecx,4)		# s1.vv2[i]
	faddl 	44(%ebp,%ecx,8)		# ss.vv2[i]
	fstpl 	80(%edx,%ecx,8)		# cla.s2.vv2[i]
	jmp 	ripet2
else2:	fldl 	44(%ebp,%ecx,8)		# ss.vv2[i]
	faddl 	44(%ebp,%ecx,8)
	fstpl 	80(%edx,%ecx,8)		# cla.s2.vv2[i]
ripet2:	incl 	-4(%ebp)
	jmp 	ciclo2
finec2:	popl 	%edx
	popl 	%ecx
	popl	%ebx
	popl	%eax
	leave
	ret


// prova1.cpp (file esistente)
#include "cc.h"
int main()
{   st1 ssa1 = {1,2,3,4, 5,6,7,8,9,10,11,12}; 
        ssa2 = {21,22,23,24, 25,26,27,28,29,30,31,32};  
    cl cla1(ssa1), cla2(cla1),  cla3(ssa1);
    cla1.stampa(); cla2.stampa();
    cla3 = cla1.elab1(ssa2);
    cla3.stampa();
    return 0;
}
 
Risultato (file es1.out):
1
2 3 4 5 		10 12 14 16 18 20 22 24 
0 0 0 0 		0 0 0 0 0 0 0 0 

2
2 3 4 5 		10 12 14 16 18 20 22 24 
0 0 0 0 		0 0 0 0 0 0 0 0 

3
23 25 27 29 	35 38 41 44 47 50 53 56 
0 0 0 0 		0 0 0 0 0 0 0 0 


// prova2.cpp (file esistente)
#include "cc.h"
int main()
{   st1 ssa = {1,2,3,4, 5,6,7,8,9,10,11,12}; 
    st2 ssb = {1,2,13,14, 15,16,17,8,9,10,11,12};
    cl cla1(ssa), cla2(ssa);
    cla2.elab2(ssb, cla1);
    cla1.stampa();
    return 0;
}
    

Risultato (file es2.out) 
1
2 3 4 5 		10 12 14 16 18 20 22 24 
3 5 26 28 	30 32 34 24 27 30 33 36 
