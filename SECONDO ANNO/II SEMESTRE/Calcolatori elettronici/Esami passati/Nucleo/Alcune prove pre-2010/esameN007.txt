Esame di Calcolatori Elettronici
Ingegneria Informatica -Appello del 11/09/2002

Sia data la seguente dichiarazione, contenuta nel file cc.h:
#include <iostream.h>
struct st { int vv1[4]; double vv2[4]; double vv3[4];};
class cl 
{	st s;
public:
	cl(st ss);
	cl(cl& cla);
	cl elab1(cl& cla, st& ss);
	cl elab2(cl& cc, st ss);
	void stampa()
	{	int i;
		for (i=0;i<4;i++) cout << s.vv1[i] << ' ' ; cout << '\t';
		for (i=0;i<4;i++) cout << s.vv2[i] << ' ' ; cout << '\t';
		for (i=0;i<4;i++) cout << s.vv3[i] << ' ' ; cout << endl;
		cout << endl;
	}
};

Esercizio 1)
Realizzare in Assembler DJGPP le funzioni membro seguenti (scrivere sul file es1.s; tradurre, 
collegare ed eseguire utilizzando i comandi indicati nelle avvertenze):
#include "cc.h"
cl::cl(st ss)
{	s = ss;
}
cl::cl(cl& cla)
{	int i; s = cla.s;
	for (i=0;i<4;i++) s.vv1[i]++;
}
cl cl::elab1(cl& cla, st& ss)
{	int i; cl cca(cla);
	for (i=0;i<4;i++) cca.s.vv1[i] = s.vv1[i] + ss.vv1[i];
	return cca;
}

Esercizio 2)
Realizzare in Assembler DJGPP la funzione membro seguente (scrivere sul file es2.s; tradurre, 
collegare ed eseguire utilizzando i comandi indicati nelle avvertenze):
#include "cc.h"
cl cl::elab2(cl& cla, st ss)
{	int i; cl cca(ss);
	for (i=0;i<4;i++)
		if (cla.s.vv2[i]<s.vv2[i]) cca.s.vv2[i] *= 2;
			else cca.s.vv2[i] = cla.s.vv2[i]+5.0;
	for (i=0;i<4;i++)
		if (ss.vv3[i]<10.0) cca.s.vv3[i] = cla.s.vv3[i]+cla.s.vv1[i];
			else cca.s.vv3[i] = cla.s.vv3[i] + cla.s.vv2[i];
	return cca;
}



Soluzioni

# es1.s
.text
.globl ___2clG2st
___2clG2st:
	pushl	%ebp
	movl 	%esp, %ebp
	pushl 	%edi
	pushl 	%esi
	movl 	8(%ebp), %edi		# indirizzo oggetto
	leal 	12(%ebp), %esi		# $ss
	cld
	movl 	$20, %ecx
	rep
	movsl
	movl 	%edi, %eax
	popl 	%esi
	popl 	%edi
	leave
	ret
	
.globl ___2clR2cl
___2clR2cl:
	pushl 	%ebp
	movl 	%esp, %ebp
	subl 	$4, %esp			# i
	pushl 	%edi
	pushl 	%esi
	movl 	8(%ebp), %edx		# indirizzo oggetto
	movl 	%edx, %edi
	movl 	12(%ebp), %esi		# &cla
	cld
	movl 	$20, %ecx
	rep
	movsl
	movl 	$0, -4(%ebp)
cicl1:	cmpl 	$4, -4(%ebp)
	jl 	avan1
	jmp 	finc1
avan1:	movl 	-4(%ebp),%ecx
	incl 	(%edx,%ecx,4)
	incl 	-4(%ebp)
	jmp 	cicl1
finc1:	movl 	%edx, %eax
	popl 	%esi
	popl 	%edi
	leave
	ret

.globl _elab1__2clR2clR2st
_elab1__2clR2clR2st:
	pushl 	%ebp
	movl 	%esp, %ebp
	subl 	$84, %esp			# i, cca (80 byte)
	pushl 	%ebx
	pushl	%ecx
	pushl	%edx
	pushl 	%esi
	movl 	8(%ebp), %ebx		# indirizzo risultato
	movl 	12(%ebp), %esi		# indirizzo oggetto
	movl 	16(%ebp), %eax		# &cla
	pushl 	%eax
	leal 	-84(%ebp), %eax		# &cca
	pushl 	%eax
	call 	___2clR2cl		# costruttore di copia
	addl 	$8, %esp
	movl 	$0, -4(%ebp)
cicl2:	cmpl 	$4, -4(%ebp)
	jl 	avan2
	jmp 	finc2
avan2:	movl 	-4(%ebp), %ecx
	movl 	(%esi,%ecx,4), %edx	# s.vv1[i]
	movl 	20(%ebp), %eax		# &ss
	addl 	(%eax,%ecx,4), %edx	# ss.vv1[i]
	movl 	%edx, -84(%ebp,%ecx,4)	# cca.s.vv1[i]
	incl 	-4(%ebp)
	jmp 	cicl2
finc2:	leal 	-84(%ebp), %eax
	pushl 	%eax
	pushl 	%ebx
	call 	___2clR2cl		# costruttore di copia
	addl 	$8, %esp
	movl 	%ebx, %eax
	popl 	%esi
	popl 	%edx
	popl	%ecx
	popl	%ebx
	leave
	ret

// prova1.cpp
// file esistente
#include "cc.h"
int main()
{	int i;
	st str1 = { 0,  1,2,3,4,  5,6,7,8 },
       	str2 = { 10, 21,22,23,24, 25,26,27,28 };
	cl cla1(str1); cla1.stampa();
	cl cla2(cla1); cla2.stampa();
	cla2 = cla1.elab1(cla2, str2); cla2.stampa();
}

Risultato

1 2 3 4		5 6 7 8		9 10 11 12

2 3 4 5		5 6 7 8		9 10 11 12

23 25 27 29	5 6 7 8 		9 10 11 12



# es2.s
.text
cinque: .long	5
dieci:	.long	10
.globl _elab2__2clR2clG2st
_elab2__2clR2clG2st:
	pushl	%ebp
	movl 	%esp, %ebp
	subl 	$84, %esp			# i, cca (80 byte)
	pushl 	%ebx
	pushl	%ecx
	pushl 	%esi
	pushl 	%edi
	movl  	8(%ebp), %ebx		# indirizzo risultato
	addl  	$-80, %esp		# record di attivazione del costruttore
	movl  	%esp, %edi
	leal  	20(%ebp), %esi		# &ss
	cld
	movl 	$20, %ecx
	rep				# ricopia ss
	movsl
	leal 	-84(%ebp), %eax		# &cca
	pushl 	%eax
	call 	___2clG2st		# costruttore
	addl 	$84, %esp
	movl 	$0, -4(%ebp)		# i
cicl1:	cmpl 	$4, -4(%ebp)
	jl 	avan1
	jmp 	finc1
avan1:	movl 	-4(%ebp), %ecx
	movl 	16(%ebp), %eax		# &cla
	fldl 	16(%eax,%ecx,8)		# cla.s.vv2[i]
	movl 	12(%ebp), %eax		# indirizzo oggetto
	fcompl 	16(%eax,%ecx,8)		# s.vv2[i]
	fstsw 	%ax
	testw	$0x0100, %ax
	jz	else1			# salta se ST >=
	fldl 	-68(%ebp,%ecx,8)		# cca.s.vv2[i]
	faddl 	-68(%ebp,%ecx,8)
	fstpl 	-68(%ebp,%ecx,8)
	jmp 	vai1
else1:	movl 	16(%ebp),%eax		# &cla	
	fldl 	16(%eax,%ecx,8)		# cla.s.vv2[i]
	fiaddl 	cinque
	fstpl 	-68(%ebp,%ecx,8)		# cca.s.vv2[i]
vai1:	incl 	-4(%ebp)
	jmp 	cicl1
finc1:	movl 	$0, -4(%ebp)
cicl2:	cmpl 	$4, -4(%ebp)
	jl	avan2
	jmp 	finc2
avan2:	movl 	-4(%ebp),%ecx
	fldl 	68(%ebp,%ecx,8)		# ss.v3[i]
	ficompl dieci
	fstsw 	%ax
	testw	$0x0100, %ax
	jz	else2			# salta se ST>=		
	movl 	16(%ebp), %eax		# &cla
	fldl 	48(%eax,%ecx,8)		# cla.s.vv3[i]
	fiaddl 	(%eax,%ecx,4)		# cla.s.vv1[i]
	fstpl 	-36(%ebp,%ecx,8)		# cca.s.vv3[i]
	jmp 	vai2
else2:	movl 	16(%ebp), %eax		# &cla
	fldl 	48(%eax,%ecx,8)		# cla.s.vv3[i]
	faddl 	16(%eax,%ecx,8)		# cla.s.vv2[i]
	fstpl 	-36(%ebp,%ecx,8)		# cca.s.vv3[i]
vai2:	incl 	-4(%ebp)
	jmp 	cicl2
finc2:	leal 	-84(%ebp), %eax
	pushl 	%eax			# &cca
	pushl 	%ebx			# indirizzo risultato
	call 	___2clR2cl		# costruttore di copia
	addl 	$8,%esp
	movl 	%ebx, %eax
	popl 	%edi
	popl 	%esi
	popl 	%ecx
	popl	%ebx
	leave
	ret

// prova2.cpp
/ file esistente
#include "cc.h"
int main()
{	int i;
	st str1 = { 1,2,3,4, 5,6,7,8, 9,10,11,12 },
            str2 = { 21,22,23,24, 9,4,19,5, 5,12,6,13 };
	cl cla1(str1), cla2(str2);
	cla2 = cla1.elab2(cla2, str2);
	cla2.stampa();
}

Risultato
22 23 24 25	14 8 24 10	26 16 29 18


 
