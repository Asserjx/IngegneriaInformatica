******************************************
* io/io.cpp
******************************************

// ( SOLUZIONE 2022-06-08
extern "C" void c_ceread(natl id, char *buf, natl quanti)
{
	if (id >= next_ce) {
		flog(LOG_WARN, "dispositivo %d non esistente", id);
		abort_p();
	}

	if (!access(buf, quanti, true, true)) {
		flog(LOG_WARN, "parametri non validi: %p, %d", buf, quanti);
		abort_p();
	}

	des_ce *c = &array_ce[id];
	sem_wait(c->free_chan);
	des_chan *ch = nullptr;
	sem_wait(c->mutex);
	natw ctl = inputb(c->iCTL);
	for (natw i = 0; i < MAX_CHAN; i++) {
		natw mask = 1 << i;
		if (!(ctl & mask)) {
			ch = &c->chan[i];
			ch->buf = buf;
			ch->quanti = quanti;
			outputb(ctl | mask, c->iCTL);
			break;
		}
	}
	sem_signal(c->mutex);
	sem_wait(ch->sync);
	sem_signal(c->free_chan);
}

extern "C" void estern_ce(int id)
{
	des_ce *c = &array_ce[id];

	for (;;) {
		natb n = inputb(c->iCHN);
		des_chan *ch = &c->chan[n];
		ch->quanti--;
		if (ch->quanti == 0) {
			sem_wait(c->mutex);
			natw ctl = inputb(c->iCTL);
			ctl &= ~(1 << n);
			outputb(ctl, c->iCTL);
			sem_signal(c->mutex);
		}
		char b = inputb(c->iRBR);
		*ch->buf++ = b;
		if (ch->quanti == 0) {
			sem_signal(ch->sync);
		}
		wfi();
	}
}
//   SOLUZIONE 2022-06-08 )


******************************************
* io/io.s
******************************************

// ( SOLUZIONE 2022-06-08
	fill_io_gate	IO_TIPO_CEREAD	a_ceread
//   SOLUZIONE 2022-06-08 )
// ( SOLUZIONE 2022-06-08
	.extern	c_cedmaread
a_ceread:
	.cfi_startproc
	.cfi_def_cfa_offset 40
	.cfi_offset rip, -40
	.cfi_offset rsp, -16
	call c_ceread
	iretq
	.cfi_endproc
//   SOLUZIONE 2022-06-08 )


