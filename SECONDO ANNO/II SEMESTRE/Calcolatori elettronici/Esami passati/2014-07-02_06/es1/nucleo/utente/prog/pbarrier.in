#include <all.h>

process pbarrier body main_body(0), 100, LIV_UTENTE;
semaphore sync1 value 0;
semaphore sync2 value 0;
semaphore sync3 value 0;

void notreg(natq a)
{
	barrier();
	printf("processo errato %d\n", a);
	terminate_p();
}

void b1(natq a)
{
	sem_wait(sync1);
	printf("processo %d: reg\n", a);
	reg();
	sem_wait(sync1);
	printf("processo %d: dereg\n", a);
	dereg();
	printf("processo %d: after dereg\n", a);
	sem_wait(sync1);
	printf("processo %d: reg\n", a);
	reg();
	sem_wait(sync1);
	printf("processo %d: barrier approach\n", a);
	barrier();
	printf("processo %d: barrier leave\n", a);
	sem_wait(sync1);
	printf("processo %d: terminate\n", a);
	terminate_p();
}

void b2(natq a)
{
	sem_wait(sync2);
	printf("processo %d: reg\n", a);
	reg();
	sem_wait(sync2);
	printf("processo %d: barrier approach\n", a);
	barrier();
	printf("processo %d: barrier leave\n", a);
	sem_wait(sync2);
	printf("processo %d: dereg\n", a);
	dereg();
	printf("processo %d: after dereg\n", a);
	sem_wait(sync2);
	printf("processo %d: reg\n", a);
	reg();
	sem_wait(sync2);
	printf("processo %d: dereg\n", a);
	dereg();
	printf("processo %d: after dereg\n", a);
	sem_wait(sync2);
	printf("processo %d: terminate\n", a);
	terminate_p();
}

void b3(natq a)
{
	sem_wait(sync3);
	printf("processo %d: reg\n", a);
	reg();
	sem_wait(sync3);
	printf("processo %d: barrier approach\n", a);
	barrier();
	printf("processo %d: barrier leave\n", a);
	sem_wait(sync3);
	printf("processo %d: barrier approach\n", a);
	barrier();
	printf("processo %d: barrier leave\n", a);
	sem_wait(sync3);
	printf("processo %d: barrier approach\n", a);
	barrier();
	printf("processo %d: barrier leave\n", a);
	sem_wait(sync3);
	printf("processo %d: terminate\n", a);
	terminate_p();
}

void conductor(natq a)
{
	sem_signal(sync1);
	sem_signal(sync2);
	sem_signal(sync3);
	sem_signal(sync2);
	sem_signal(sync3);
	sem_signal(sync1);
	sem_signal(sync2);
	sem_signal(sync3);
	sem_signal(sync2);
	sem_signal(sync1);
	sem_signal(sync1);
	sem_signal(sync2);
	sem_signal(sync3);
	sem_signal(sync1);
	sem_signal(sync2);
	sem_signal(sync3);
	pause();
	terminate_p();
}

process_body main_body(natq a)
{
	activate_p(notreg, 1, 50, LIV_UTENTE);
	activate_p(b1, 1, 29, LIV_UTENTE);
	activate_p(b2, 2, 30, LIV_UTENTE);
	activate_p(b3, 3, 28, LIV_UTENTE);
	activate_p(conductor, 4, 10, LIV_UTENTE);
}
