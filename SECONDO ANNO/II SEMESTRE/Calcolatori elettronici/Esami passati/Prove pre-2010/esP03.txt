Esame di Calcolatori Elettronici
Ingegneria Informatica -Appello del 15/02/2005

Sia data la seguente dichiarazione, contenuta nel file cc.h:
#include <iostream.h>
struct sta { int vv1[4]; int vv2[4]; };
struct stb { double vv1[4]; double vv2[4]; } ;
class cl 
{	stb s;
public:
	cl();
	cl(sta ss, double d1, double d2);
	void elab1(sta ss, cl& cc);
	cl elab2(cl& cc, sta ss);
	void stampa()
	{	int i;
		for (i=0;i<4;i++) cout << s.vv1[i] << ' '; cout << '\t';
		for (i=0;i<4;i++) cout << s.vv2[i] << ' '; cout << endl;
		cout << endl;
	}
};

Esercizio 1)
Realizzare in Assembler DJGPP le funzioni membro seguenti (scrivere sul file es1.s; tradurre, collegare 
ed eseguire utilizzando i comandi indicati nelle avvertenze):
#include "cc.h"
#include "cc.h"
cl::cl(){ }
cl::cl(sta ss, double d1, double d2)
{	for (int i=0; i<4; i++)
	{ s.vv1[i]=ss.vv1[i]+d1; s.vv2[i]=ss.vv2[i]+d2; }
}
void cl::elab1(sta ss, cl& cc )
{	for (int i=0;i<4;i++)
	{ cc.s.vv1[i]=s.vv1[i]+ss.vv1[i]; cc.s.vv2[i]=s.vv2[i]-ss.vv2[i]; }
}

Esercizio 2)
Realizzare in Assembler DJGPP la funzione membro seguente (scrivere sul file es2.s; tradurre, 
collegare ed eseguire utilizzando i comandi indicati nelle avvertenze):
#include "cc.h"
cl cl::elab2(cl& cc, sta ss)
{	int i; cl cla;
	elab1(ss, cla);
	for (i=0;i<4;i++)
	{	if (s.vv1[i]<3) cla.s.vv1[i]+=ss.vv1[i]; else cla.s.vv1[i]= 0;
		if (s.vv2[i]<5) cla.s.vv2[i] +=ss.vv2[i]; else cla.s.vv2[i]= 1;
	}
	return cla;
}

Esercizio 3)
Definire in Java quanto richiesto (scrivere nel file Esa.java, tradurre, collegare ed eseguire utilizzando i 
comandi indicati nelle avvertenze).
Il file contiene 1) una classe Elemento, costituita da due campi dati pubblici, un campo di tipo int e di 
nome inf, e un campo (riferimento) di tipo Elemento e di nome pun; 2) una classe Lista, che realizza 
una lista di oggetti di tipo Elemento, con i metodi (il cui significato è evidente) boolean Vuota(), void 
insTesta(Elemento el), Elemento estTesta() e void appendi(Lista li);3) una classe Esa con il metodo 
Lista fai() che a) definisce una lista la e vi inserisce (in testa) i numeri 0, 1, ... 5, b) definisce una lista lb 
e vi inserisce (in testa) i numeri 10, 11, ...,15, c) appende alla lista la la lista lb, e d) restituisce la.


Soluzioni


Esercizio 1

.text
.global ___2cl
___2cl:
       pushl   %ebp
       movl    %esp, %ebp       
       movl    8(%ebp), %eax
       leave
       ret

.global ___2clG3stadd
___2clG3stadd:
       pushl   %ebp
       movl    %esp, %ebp
       subl    $4, %esp
       pushl   %ecx
       movl    8(%ebp), %eax
       movl    $0, -4(%ebp)			# i
for1:  cmpl    $4, -4(%ebp)
       jl      avan1
       jmp     fine1
avan1: movl    -4(%ebp), %ecx
       fildl   12(%ebp,%ecx,4)		# ss.vv1[i]
       faddl   44(%ebp)			# d1
       fstpl   (%eax,%ecx,8)		# s.vv1[i]
       fildl   28(%ebp,%ecx,4)		# ss.vv2[i]
       faddl   52(%ebp)			# d2
       fstpl   32(%eax,%ecx,8)		# s.vv2[i]
       incl    -4(%ebp)
       jmp     for1
fine1: popl    %ecx
       leave
       ret

.global _elab1__2clG3staR2cl
_elab1__2clG3staR2cl:
        pushl   %ebp
        movl    %esp, %ebp
        subl    $4, %esp
        pushl   %ebx
        pushl   %ecx
        pushl   %edx
        movl    8(%ebp), %ebx		# this
        movl    44(%ebp), %edx		# &cc
        movl    $0, -4(%ebp)		# i
for2:   cmpl    $4, -4(%ebp)
        jl      avan2
        jmp     fine2
avan2:  movl    -4(%ebp), %ecx
        fldl    (%ebx,%ecx,8)		# s.vv1[i]
        fiaddl  12(%ebp,%ecx,4)		# ss.vv1[i]
        fstpl   (%edx,%ecx,8)		# cc.s.vv1[i]
        fldl    32(%ebx,%ecx,8)		# s.vv2[i]
        fisubl  28(%ebp,%ecx,4)		# ss.vv2[i]
        fstpl   32(%edx,%ecx,8)		# cc.s.vv2[i]
        incl    -4(%ebp)
        jmp     for2
fine2:  popl    %edx
        popl    %ecx
        popl    %ebx
        leave
        ret


Esercizio 2

.text
tre:	.double  0e3
cin:	.double  0e5	
.global _elab2__2clR2clG3sta
_elab2__2clR2clG3sta:
	 pushl   %ebp
	 movl    %esp, %ebp
	 subl    $68, %esp			# i, cla
	 pushl   %ecx
	 pushl   %esi
	 pushl   %edi                      
	 leal    -68(%ebp), %eax		# &cla
	 pushl   %eax                      	
	 call    ___2cl
	 addl    $4, %esp			# ripulitura pila
	 leal    -68(%ebp), %eax 		# &cla
	 pushl   %eax
	 subl    $32, %esp 		# spazio per ss
	 movl	   %esp, %edi 		# &ss per elab1    
	 leal    20(%ebp), %esi              # &ss di elab2
       movl    $8, %ecx                    
	 cld
	 rep
	 movsl                           
	 pushl   12(%ebp)                 	# this 
	 call    _elab1__2clG3staR2cl
	 addl    $40,%esp			# ripulitura pila
	 movl    $0, -4(%ebp)
ciclo: cmpl    $4, -4(%ebp)
	 jge 	   f_for                     
	 movl    -4(%ebp), %ecx              
	 movl    12(%ebp), %esi              # this
	 fldl    (%esi,%ecx,8)		# s.vv1[i]
	 fcompl   tre
	 fstsw                           
	 testw   $0x0100,%ax
	 jz      else1                    	# ST >=
	 fildl   20(%ebp,%ecx,4)		# ss.vv1[i]
	 faddl   -68(%ebp,%ecx,8)		# cla.s.vv1[i]
	 fstpl   -68(%ebp,%ecx,8)
	 jmp     fin1                 	
else1: fldz
	 fstpl   -68(%ebp,%ecx,8)		# cla.s.vv1[i]
fin1:  fldl    32(%esi,%ecx,8)		# s.vv2[i]
	 fcompl  cin
	 fstsw                           
	 testw   $0x0100,%ax
	 jz      else2                    	# ST >=
     	 fildl   36(%ebp,%ecx,4)		# ss.vv2[i]
	 faddl   -36(%ebp,%ecx,8)		# cla.s.vv2[i]
	 fstpl   -36(%ebp,%ecx,8)
	 jmp fin2                   
else2: fld1
	 fstpl   -36(%ebp,%ecx,8)		# cla.s.vv1[i]
fin2:  incl    -4(%ebp)
	 jmp     ciclo                      
f_for: leal    -68(%ebp), %esi            	# &cla
	 movl    8(%ebp),%edi                # indirizzo risultato
	 movl    $16,%ecx                   
	 cld
	 rep
	 movsl                           
	 movl     8(%ebp), %eax              # indirizzo risultato
       popl     %edi
	 popl     %esi
	 popl     %ecx
	 leave
	 ret


Esercizio 3

class Elemento
	{  int inf; Elemento pun;  }
class Lista
{	private Elemento testa = null;
	boolean vuota()
	{	if (testa==null) return true; 
		return false;
	}
	void insTesta(Elemento el)
	{    el.pun = testa; testa = el; 
	}
	Elemento estTesta()
	{   Elemento p = testa; testa = testa.pun;
	    return p;
	}
	void appendi(Lista li)
         {    Elemento p = null; Elemento q;
             for (q = testa; q != null; q = q.pun) p = q;
             if (testa == null) testa = li.testa; else p.pun = li.testa;
         }     
}
class Esa
{	Lista fai()
	{	Lista la = new Lista(), lb = new Lista(); Elemento el;
		for (int i=0; i<5; i++) { el = new Elemento(); el.inf = i; la.insTesta(el); }
		for (int i=10; i<15; i++) { el = new Elemento(); el.inf = i; lb.insTesta(el); }
		la.appendi(lb); 
		return la;
	}
}


File esistenti

// file prova1.cpp
#include "cc.h"
int main()
{   sta sa = {1,2,3,4, 5,6,7,8  };
    stb  sb = {1.1,2.1,3.1,4.1, 11.1,12.1,13.1,14.1 };
    cl cc1(sa, 1.2, 2.2); cc1.stampa();
    cl cc2;
    cc1.elab1(sa, cc2); cc2.stampa();
}

// prova2.cpp
#include "cc.h"
int main()
{      sta ss1 = {1,2,3,4, 1,2,3,4};
       stb ss2 = {11.1,12.1,13.1,14.1, 5.1,6.1,7.1,8.1};
       cl cla1(ss1,1,2), cla2(ss1,3,4), cla3;
       cla3 = cla1.elab2(cla2, ss1);
       cla3.stampa();
}

// file Console.java
// non riportato

// file Pesa.java
public class Pesa	
{	public static void main(String[] args) 
	{	Esa ee = new Esa(); Lista lr = ee.fai(); Elemento el;
		while (!lr.vuota())
		{ el = lr.estTesta(); 
		  Console.scriviIntero(el.inf);
		}
	}
}


Comandi da utilizzare:

Esercizio 1:	
traduzione e collegamento	gcc es1.s prova1.cpp –lgpp
esecuzione		a

Esercizio 2:	
traduzione e collegamento	gcc es1.s es2.s prova2.cpp –lgpp
esecuzione		a

Esercizio 3:	
traduzione e collegamento	javac Pesa.java
esecuzione		java Pesa


Risultati:

Esercizio 1

2.2 3.2 4.2 5.2		7.2 8.2 9.2 10.2
3.2 5.2 7.2 9.2		2.2 2.2 2.2 2.2


Esercizio 2

4 0 0 0			3 4 1 1


Esercizio 3 

4
3
2
1
0
14
13
12
11
10