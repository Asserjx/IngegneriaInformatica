Esame di Calcolatori Elettronici
Ingegneria Informatica -Appello del 24/06/2003


Sia data la seguente dichiarazione, contenuta nel file cc.h:
	#include <iostream.h>
	struct st { int vv1[4]; int vv2[6]; double vv3[8]; };
	class cl
	{	int ii[4];
		double dd[8];
		st s;
	public:
	cl(st* ps = 0, int a = 0, double d = 0);
	cl(cl& cla);
	cl elab1(st ss, int n);
	cl elab2(double bb[], cl& cla);
	void stampa()
	{	int i;
		for (i=0;i<4;i++) cout << ii[i] << ' '; cout << '\t';
		for (i=0;i<8;i++) cout << dd[i] << ' '; cout << endl;
		for (i=0;i<4;i++) cout << s.vv1[i] << ' '; cout << '\t';
		for (i=0;i<6;i++) cout << s.vv2[i] << ' '; cout << '\t';
		for (i=0;i<8;i++) cout << s.vv3[i] << ' '; cout << endl;
	}
};

Esercizio 1)
Realizzare in Assembler DJGPP le funzioni membro seguenti (scrivere sul file 
es1.s; tradurre, collegare ed eseguire utilizzando i comandi indicati nelle 
avvertenze):
	#include "cc.h"
	cl::cl(st* ps, int a, double d)
	{	int i;
		if (ps!=0 && a!=0 && d!=0)
		{	for (i=0;i<4;i++) ii[i]= a+i; for (i=0;i<8;i++) dd[i]= d;
			s = *ps;
		}
	}
	cl::cl(cl& cla)
	{	int i; s = cla.s;
		for (i=0;i<4;i++) ii[i] = cla.ii[i]+2;
		for(i=0;i<8;i++) dd[i] = cla.dd[i];
	}
	cl cl::elab1(st ss, int n)
	{	int i; cl cc(*this);
		for (i=0;i<4;i++)
		{	cc.ii[i] = ss.vv1[i]+n;
			cc.s.vv1[i] = ss.vv2[i+2];	}
		return cc;
	}

Esercizio 2)
Realizzare in Assembler DJGPP la funzione membro seguente (scrivere sul file 
es2.s; tradurre, collegare ed eseguire utilizzando i comandi indicati nelle 
avvertenze):
	#include "cc.h"
	cl cl::elab2(double bb[], cl& cla)
	{	int i; cl cc(cla);
		for (i=0;i<8;i++)
		{	if (s.vv3[i]<bb[i]) cc.dd[i] = dd[i]+s.vv3[i];
				else cc.dd[i] = bb[i]+s.vv1[3]+ s.vv3[i];
			if (s.vv3[i]<s.vv1[3]) cc.s.vv3[i] = bb[i]+bb[7];
				else cc.s.vv3[i] = bb[i]+bb[0];
		}
		return cc;
	}




Soluzioni


# es1.s
.text
.global ___2clP2stid
___2clP2stid: 
		pushl 	%ebp
	        	movl 	%esp, %ebp
  		pushl 	%ebx
    		pushl 	%ecx
   		pushl 	%esi
    		pushl 	%edi
    		subl 	$4, %esp
     		cmpl 	$0, 12(%ebp)		# ps
    		jz 	f_ifc
  		cmpl 	$0, 16(%ebp)		# a
  		jz 	f_ifc
   		fldz
   		fldl 	20(%ebp)			# d
		fcompp
            	fstsw 	%ax
            	testw 	$0x4000, %ax
            	jnz 	f_ifc
            	movl 	8(%ebp), %ebx		# this
            	movl 	$0, -4(%ebp)
for1c:      	cmpl 	$4, -4(%ebp)
            	jge  	f_for1c
            	movl 	-4(%ebp), %ecx
            	movl 	16(%ebp), %eax		# a
            	addl 	%ecx, %eax
            	movl 	%eax, (%ebx,%ecx,4)	# ii[i]		
            	incl 	-4(%ebp)
		jmp 	for1c
f_for1c: 		movl 	$0, -4(%ebp)
for2c: 		cmpl 	$8, -4(%ebp)
            	jge 	f_for2c
            	movl 	-4(%ebp), %ecx
            	fldl 	20(%ebp)			# d
            	fstpl 	16(%ebx,%ecx,8)		# dd[i]
            	incl 	-4(%ebp)
            	jmp 	for2c
f_for2c:    	movl 	12(%ebp), %esi		# ps
            	leal 	80(%ebx), %edi		# &s
            	cld
            	movl 	$26, %ecx
            	rep
            	movsl
f_ifc:      	movl 	%ebx, %eax		# this
            	popl 	%edi
            	popl 	%esi
            	popl 	%ecx
            	popl 	%ebx
            	leave
            	ret

.global ___2clR2cl
___2clR2cl: 
		pushl 	%ebp
            	movl 	%esp, %ebp
            	subl 	$4, %esp
            	pushl 	%ebx
            	pushl 	%edx
            	pushl 	%ecx
            	pushl 	%esi
            	pushl 	%edi
            	movl 	8(%ebp), %ebx		# this
            	movl 	12(%ebp), %edx		# &cla            
            	leal 	80(%edx), %esi		# &cla.s
            	leal 	80(%ebx), %edi		# &s
            	cld
            	movl 	$26, %ecx
            	rep
            	movsl
            	movl 	$0, -4(%ebp)
for1cp:     	cmpl 	$4, -4(%ebp)
            	jge  	f_for1cp
            	movl 	-4(%ebp), %ecx
            	movl 	(%edx,%ecx,4), %eax	# cla.ii[i]
            	addl 	$2, %eax
            	movl 	%eax, (%ebx,%ecx,4)	# ii[i]
            	incl 	-4(%ebp)
            	jmp 	for1cp
f_for1cp: 	movl 	$0, -4(%ebp)
for2cp:     	cmpl 	$8, -4(%ebp)
            	jge  	f_for2cp
            	movl 	-4(%ebp), %ecx
            	fldl 	16(%edx,%ecx,8)		# cla.dd[i]
            	fstpl	16(%ebx,%ecx,8)		# dd[i]
            	incl 	-4(%ebp)
            	jmp 	for2cp
f_for2cp: 	movl 	%ebx, %eax
            	popl 	%edi
            	popl 	%esi
            	popl 	%ecx
            	popl 	%edx
            	popl 	%ebx
            	leave
            	ret

.global _elab1__2clG2sti
_elab1__2clG2sti: 
		pushl 	%ebp
            	movl 	%esp, %ebp
            	subl 	$188, %esp		# i, cc
		pushl 	%ecx
 		pushl 	%edx	
		pushl 	12(%ebp)			# this
            	leal 	-188(%ebp), %eax		# &cc
            	pushl 	%eax
   		call 	___2clR2cl		# costruttore di copia
    		addl 	$8, %esp
 		movl 	$0, -4(%ebp)
forelab1:   	cmpl 	$4, -4(%ebp)
		jge 	f_forelab1
		movl 	-4(%ebp), %ecx
  		movl 	16(%ebp,%ecx,4), %eax	# ss.vv1[i]
  		addl 	120(%ebp), %eax		# n
  		movl 	%eax, -188(%ebp,%ecx,4)	# cc.ii[i]
    		movl 	%ecx, %edx
  		addl 	$2, %edx
  		movl 	32(%ebp,%edx,4), %eax	# ss.vv2[i+2]
  		movl 	%eax, -108(%ebp,%ecx,4)	# cc.s.vv1[i]
  		incl 	-4(%ebp)
 		jmp 	forelab1
f_forelab1: 	leal 	-188(%ebp), %eax		# &cc
  		pushl 	%eax
   		pushl 	8(%ebp)			# ind. risultato
   		call 	___2clR2cl		# costruttore di copia
   		addl 	$8, %esp
   		movl 	8(%ebp), %eax
      		popl 	%edx
  		popl 	%ecx
            	leave
            	ret


// prova1.cpp
// file esistente
#include "cc.h"
int main()
{   st stru = { 1,2,3,4, 5,6,7,8,9,10, 11,12,13,14,15,16,17,18 };
    st* pu = &stru;
    cl cla1(pu,1,2), cla2(cla1), cla3;
    cla1.stampa(); cout << endl; cla2.stampa(); cout << endl;
    cla3 = cla1.elab1(stru,10);
    cla3.stampa();
    return 0;
}

Risultati
1 2 3 4			2 2 2 2 2 2 2 2
1 2 3 4			5 6 7 8 9 10		11 12 13 14 15 16 17 18

3 4 5 6			2 2 2 2 2 2 2 2
1 2 3 4			5 6 7 8 9 10		11 12 13 14 15 16 17 18

13 14 15 16		2 2 2 2 2 2 2 2
7 8 9 10			5 6 7 8 9 10		11 12 13 14 15 16 17 18



// es2.s
.text
.global _elab2__2clPdR2cl
_elab2__2clPdR2cl: 
		pushl 	%ebp
        		movl 	%esp, %ebp
    		subl 	$188, %esp		# i, cc
    		pushl 	%edi
     		pushl 	%ecx
   		pushl 	%ebx
   		pushl 	%esi
   		pushl 	%edx
      		movl 	12(%ebp), %esi		# this
    		movl 	16(%ebp), %ebx		# bb
    		movl 	20(%ebp), %ecx		# &cla
		pushl	%ecx				
     		leal 	-188(%ebp), %edx		# &cc
		pushl 	%edx
     		call 	___2clR2cl		# costruttore di copia
      		addl 	$8, %esp
      		movl 	$0, -4(%ebp)
for:  		cmpl 	$8, -4(%ebp)
   		jge 	fine
		movl	-4(%ebp), %ecx
            	fldl 	120(%esi,%ecx,8)		# s.vv3[i]
            	fcompl (%ebx,%ecx,8)		# bb[i]	
            	fstsw 	%ax
     		testw 	$0x0100,%ax
     		jz 	avan1                  	# salta se ST >=
    		fldl 	16(%esi,%ecx,8)		# dd[i]
  		faddl 	120(%esi,%ecx,8)		# s.vv3[i]
 		fstpl 	16(%edx,%ecx,8)		# cc.dd[i]
  		jmp 	oltre1
avan1:      	fildl 	92(%esi)			# s.vv1[3]
  		faddl 	(%ebx,%ecx,8)		# bb[i]
   		faddl 	120(%esi,%ecx,8)		# s.vv3[i]
    		fstpl 	16(%edx,%ecx,8)		# cc.dd[i]
oltre1:   	fldl 	120(%esi,%ecx,8)		# s.vv3[i]
 		ficompl 	92(%esi)			# s.vv1[3]
		fstsw 	%ax
 		testw 	$0x0100,%ax
 		jz 	avan2			# salta se ST >=
      		fldl 	56(%ebx)			# bb[7]
   		faddl 	(%ebx,%ecx,8)		# bb[i]
   		fstpl 	120(%edx,%ecx,8)		# cc.s.vv3[i]
  		jmp 	oltre2
avan2:   	fldl 	(%ebx)				# bb[0]
  		faddl 	(%ebx,%ecx,8)		# bb[i]
   		fstpl 	120(%edx,%ecx,8)		# cc.s.vv3[i]
oltre2:   	incl 	-4(%ebp)
    		jmp 	for
fine:  		pushl 	%edx			# &cc
		movl 	8(%ebp),%eax		# indirizzo risultato 		
 		pushl 	%eax
 		call 	___2clR2cl		# costruttore di copia
 		addl 	$8, %esp
   		popl 	%edx
  		popl 	%esi
   		popl 	%ebx
   		popl 	%ecx
  		popl 	%edi
		leave
		ret

 
// prova2.cpp
file esistente
#include "cc.h"
int main()
{   double vet[8] = { 1,2,3,4,21,22,23,24 };
    st stru = { 1,2,3,15, 5,6,7,8,9,10, 11,12,13,14,15,16,17,18 };
    st* pu = &stru;
    cl cla1(pu,1,15), cla2(pu,10,15), cla3;
    cla3 = cla1.elab2(vet, cla2);
    cla3.stampa();
    return 0;
}
    
Risultati

14 15 16 17	27 29 31 33 30 31 32 33
1 2 3 15		5 6 7 8 9 10		25 26 27 28 22 23 24 25

