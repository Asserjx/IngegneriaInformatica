******************************************
* sistema/sistema.cpp
******************************************

// ( SOLUZIONE 2020-02-26
	des_proc *self = des_p(esecuzione->id),
		 *master = self->master;

	self->last_exception = tipo;
	if (master) {
		if (master->is_waiting) {
			// il master ha chiamato proc_wait() e si è bloccato,
			// quindi questo è il primo slave: risvegliamo il
			// master facendo in modo che proc_wait() gli
			// restituisca l'identificatore dello slave
			master->contesto[I_RAX] = esecuzione->id;
			inserimento_lista(pronti, master->my_proc_elem);
			master->is_waiting = false;
		}
		// lo slave deve essere messo in pausa in ogni caso.
		// Ne uscira' se il master chiama proc_cont() o termina.
		inserimento_lista(master->paused_slaves, esecuzione);
		schedulatore();
		// saltiamo la c_abort_p()
		return;
	}
	// il processo non e' uno slave:
	// procediamo con la distruzione del processo
//   SOLUZIONE 2020-02-26 )
// ( SOLUZIONE 2020-02-26
	des_proc *self = des_p(esecuzione->id);

	// scolleghiamo tutti gli eventuali slave
	for (des_proc *slave = self->slaves; slave; slave = slave->next_slave) {
		slave->master = 0;
	}

	// distruggiamo tutti gli eventuali slave in pausa
	while (self->paused_slaves) {
		proc_elem *slave;
		rimozione_lista(self->paused_slaves, slave);
		distruggi_processo(slave);
		flog(sev, "Processo slave %d distrutto", p->id);
		dealloca(slave);
		processi--;
	}

	des_proc *master = self->master;
	if (master) {
		sgancia_slave(self);
		// se non ci sono piu' slave e il master e' bloccato nella proc_wait,
		// il master si deve risvegliare e la proc_wait deve restituirgli 0xFFFFFFFF
		if (master->is_waiting && !master->slaves) {
			master->is_waiting = false;
			master->contesto[I_RAX] = 0xFFFFFFFF;
			inserimento_lista(pronti, master->my_proc_elem);
		}
		
	}
//   SOLUZIONE 2020-02-26 )
// ( SOLUZIONE 2020-02-26
extern "C" void c_proc_wait()
{
	des_proc *self = des_p(esecuzione->id);

	if (!self->slaves) {
		self->contesto[I_RAX] = 0xFFFFFFFF;
		return;
	}

	if (self->paused_slaves) {
		self->contesto[I_RAX] = self->paused_slaves->id;
	} else {
		self->is_waiting = true;
		schedulatore();
	}
}

extern "C" void c_proc_cont(natl id, bool terminate)
{
	des_proc *self = des_p(esecuzione->id);

	proc_elem *slave = rimozione_lista_id(self->paused_slaves, id);
	if (!slave) {
		c_abort_p();
		return;
	}
	if (terminate) {
		distruggi_processo(slave);
		dealloca(slave);
		processi--;
	} else {
		inspronti();
		inserimento_lista(pronti, slave);
		schedulatore();
	}
}
//   SOLUZIONE 2020-02-26 )


