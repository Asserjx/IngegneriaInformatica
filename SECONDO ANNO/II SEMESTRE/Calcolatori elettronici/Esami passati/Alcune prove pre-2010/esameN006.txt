Esame di Calcolatori Elettronici
Ingegneria Informatica - Appello del 10/07/2002


Sia data la seguente dichiarazione, contenuta nel file cc.h:

#include <iostream.h>
struct st { int vv1[4]; int vv2[4]; double vv3[4]; };
class cl
{	int ii[4]; double dd[4]; 
	st s;
public:
	cl(st* ps = 0, int aa[] = 0);
	cl elab1(cl cla);
	cl elab2(double bb1[], double bb2[]);
	void stampa()
	{	int i;
		for (i=0;i<4;i++) cout << ii[i] << ' '; cout << '\t';
		for (i=0;i<4;i++) cout << dd[i] << ' '; cout << endl;
		for (i=0;i<4;i++) cout << s.vv1[i] << ' '; cout << '\t';
		for (i=0;i<4;i++) cout << s.vv2[i] << ' '; cout << '\t';
		for (i=0;i<4;i++) cout << s.vv3[i] << ' '; cout << endl; 
	}
};


Esercizio 1)
Realizzare in Assembler DJGPP le funzioni membro cl() ed elab1() (scrivere sul file es1.s; tradurre, 
collegare ed eseguire utilizzando i comandi indicati nelle avvertenze):

#include "cc.h"
cl::cl(st* ps = 0, int aa[] = 0)
{	int i;
	if (ps!=0 && aa!=0) for (i=0;i<4;i++)
	{	ii[i]= aa[i]; dd[i] = 0; 
		s.vv1[i] = ps->vv1[i]; s.vv2[i] = ps->vv2[i];
		s.vv3[i] = ps->vv3[i];
	}
}
cl cl::elab1(cl cla)
{	int i; cl cc(cla);
	for (i=0;i<4;i++)
	{	cc.ii[i] = ii[i]; 
		cc.s.vv1[i] = cc.s.vv2[i] = s.vv1[i]+s.vv2[i];
	}
	return cc;
}


Esercizio 2)
Realizzare in Assembler DJGPP la funzione membro elab2() (scrivere sul file es2.s; tradurre, 
collegare ed eseguire utilizzando i comandi indicati nelle avvertenze):

#include "cc.h"
cl cl::elab2(double bb1[], double bb2[])
{	int i; cl cla(*this);
	for (i=0;i<4;i++)
		if (s.vv3[i]<bb1[i])
		{	cla.dd[i] = dd[i]+bb2[i];
			cla.s.vv3[i] = s.vv3[i]+bb2[i];
		}
		else
		{	cla.dd[i] = s.vv1[i]+s.vv2[i]+s.vv3[i];
			cla.s.vv3[i] = bb1[i]+bb2[i];
		}
	return cla;
}




Soluzioni


# es1.s
.text
.globl ___2clP2stPi
___2clP2stPi:
	pushl	%ebp
	movl 	%esp, %ebp
	subl 	$4, %esp			# i		
	pushl 	%ebx
	pushl	%ecx
	pushl 	%edx
	movl 	8(%ebp),%edx		# indirizzo oggetto
	cmpl 	$0, 12(%ebp)		# ps
	je 	fin1
	cmpl 	$0, 16(%ebp)		# aa[]
	je 	fin1
	movl 	$0, -4(%ebp)
c1:	cmpl 	$4, -4(%ebp)
	jl 	avan1
	jmp	fin1
avan1:	movl 	-4(%ebp), %ecx
	movl 	16(%ebp), %ebx		# aa[]
	movl 	(%ebx,%ecx,4), %eax	# aa[i]
	movl 	%eax, (%edx,%ecx,4)	# ii[i]
	movl 	$0, 16(%edx,%ecx,8)	# dd[i] prima parte
	movl 	$0, 20(%edx,%ecx,8)	# dd[i] seconda parte
	movl 	12(%ebp), %ebx		# ps
	movl 	(%ebx,%ecx,4), %eax	# ps->vv1[i]
	movl 	%eax, 48(%edx,%ecx,4)	# s.vv1[i]
	movl 	16(%ebx,%ecx,4), %eax	# ps->vv2[i]
	movl 	%eax, 64(%edx,%ecx,4)	# s.vv2[i]
	movl 	32(%ebx,%ecx,8), %eax	# ps->vv3[i] prima parte
	movl 	%eax, 80(%edx,%ecx,8)	# s.vv3[i] prima parte
	movl 	36(%ebx,%ecx,8), %eax	# ps->vv3[i] seconda parte
	movl 	%eax, 84(%edx,%ecx,8)	# s.vv3[i] seconda parte
	incl 	-4(%ebp)
	jmp 	c1
fin1:	movl 	%edx,%eax
	popl 	%edx
	popl 	%ecx
	popl	%ebx
	leave
	ret
	
.globl _elab1__2clT0
_elab1__2clT0:
	pushl 	%ebp
	movl 	%esp, %ebp
	subl 	$116, %esp		# i, cc(112 byte)
	pushl 	%ecx
	pushl 	%edx
	pushl 	%esi
	pushl	%edi
	movl 	8(%ebp), %eax		# indirizzo risulato
	movl 	12(%ebp), %edx		# indirizzo oggetto
	leal 	-116(%ebp), %edi		# &cc
	leal 	16(%ebp), %esi		# &cla
	cld
	movl 	$28, %ecx
	rep
	movsl
	movl 	$0, -4(%ebp)		# i
c2:	cmpl 	$4, -4(%ebp)
	jl 	avan2
	jmp 	finc2
avan2:	movl 	-4(%ebp),%ecx
	movl 	(%edx,%ecx,4), %esi	# ii[i]
	movl 	%esi, -116(%ebp,%ecx,4)	# cc.ii[i]
	movl 	48(%edx,%ecx,4), %esi	# s.vv1[i]
	addl 	64(%edx,%ecx,4), %esi	# s.vv2[i]
	movl 	%esi, -52(%ebp,%ecx,4)	# cc.s.vv2[i]
	movl 	%esi, -68(%ebp,%ecx,4)	# cc.s.vv1[i]
	incl 	-4(%ebp)
	jmp 	c2
finc2:	movl 	%eax, %edi
	leal 	-116(%ebp), %esi
	cld
	movl 	$28, %ecx
	rep
	movsl
	popl 	%edi
	popl 	%esi
	popl 	%edx
	popl	%ecx
	leave
	ret

// prova1.cpp
// file esistente
#include "cc.h"
int main()
{   int vet1[4] = {51,52,53,54}; int vet2[4] = {55,56,57,58};
    st stru1 = { 1,2,3,4, 5,6,7,8, 11,12,13,14 },
       stru2 = { 21,22,23,24, 25,26,27,28, 31,32,33,34};
    st* pu1 = &stru1; st* pu2 = &stru2;
    cl cla1(pu1, vet1), cla2(pu2, vet2), cla3;
    cla1.stampa(); cout << endl; cla2.stampa();
    cout << endl;
    cla3 = cla1.elab1(cla2);
    cla3.stampa();
    return 0;
}

Risultati
51 52 53 54	0 0 0 0
1 2 3 4		5 6 7 8		11 12 13 14

55 56 57 58	0 0 0 0
21 22 23 24	25 26 27 28	31 32 33 34

51 52 53 54	0 0 0 0
6 8 10 12	6 8 10 12	31 32 33 34    


// es2.s
.text
.globl _elab2__2clPdT1
_elab2__2clPdT1:
	pushl %ebp
	movl 	%esp, %ebp
	subl 	$116, %esp		# i, cla (112 byte)
	pushl 	%ebx
	pushl	%ecx
	pushl 	%esi
	pushl 	%edi
	movl 	12(%ebp), %edx		# indirizzo oggetto
	leal 	-116(%ebp), %edi		# &cla
	movl 	%edx, %esi		# indirizzo oggetto 
	cld
	movl 	$28, %ecx
	rep
	movsl
	movl 	$0, -4(%ebp)		# i
ciclo:	cmpl 	$4, -4(%ebp)
	jl 	avan
	jmp 	finc
avan:	movl 	-4(%ebp),%ecx
	movl 	16(%ebp), %esi		# bb1[]
	fldl 	80(%edx,%ecx,8)		# s.vv3[i] in ST
	fcompl 	(%esi,%ecx,8)		# bb[i]
	fstsw 	%ax
	testw	$0x100, %ax
	jz 	else			# salta se ST maggiore o uguale
	fldl 	16(%edx,%ecx,8)		# dd[i]
	movl 	20(%ebp), %edi		# bb2[]
	faddl 	(%edi,%ecx,8)		# bb2[i]
	fstpl 	-100(%ebp,%ecx,8)		# cla.dd[i]	
	fldl 	80(%edx,%ecx,8)		# s.vv3[i]
	movl 	20(%ebp),%edi		# bb2[]
	faddl 	(%edi,%ecx,8)		# bb2[i]
	fstpl 	-36(%ebp,%ecx,8)		# cla.s.vv3[i]
	jmp 	oltre
else:	fildl 	48(%edx,%ecx,4)		# s.vv1[i]
	fiaddl 	64(%edx,%ecx,4)		# s.vv2[i]
	faddl 	80(%edx,%ecx,8)		# s.vv3[i]
	fstpl 	-100(%ebp,%ecx,8)		# cla.dd[i]
	movl 	16(%ebp),%esi		# bb1[]
	movl 	20(%ebp),%edi		# bb2[]
	fldl 	(%esi,%ecx,8)		# bb1[i]
	faddl 	(%edi,%ecx,8)		# bb2[i]
	fstpl 	-36(%ebp,%ecx,8)		# cla.s.vv3[i]
oltre:	incl 	-4(%ebp)
	jmp 	ciclo
finc:	movl 	8(%ebp),%edi
	leal 	-116(%ebp),%esi
	cld
	movl 	$28,%ecx
	rep
	movsl
	movl 	8(%ebp), %eax
	popl 	%edi
	popl 	%esi
	popl 	%ecx
	popl	%ebx
	leave
	ret

 
// prova2.cpp
file esistente
#include "cc.h"
int main()
{   int vet[4] = { 11,12,13,14 };
    double re1[4] = {5,6,35,36}; double re2[4] = {55,56,57,58};
    st stru = { 1,2,3,4, 5,6,7,8, 9,10,11,12 };
    st* pu = &stru;
    cl cla1(pu, vet), cla2;
    cla2 = cla1.elab2(re1, re2);
    cla2.stampa();
    return 0;
}
    
Risultati

11 12 13 14	15 18 57 58
1 2 3 4		5 6 7 8		60 62 68 70
