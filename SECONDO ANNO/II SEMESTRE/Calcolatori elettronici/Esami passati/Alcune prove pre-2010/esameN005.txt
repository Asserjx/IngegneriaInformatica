Esame di Calcolatori Elettronici
Ingegneria Informatica -Appello del 20/06/2002

Sia data la seguente dichiarazione, contenuta nel file cc.h:
	#include <iostream.h>
	struct st { int vv1[4]; char cc[4]; double vv2[4]; };
	class cl 
	{	st s; double d[4];
	public:
		cl(st* p_s = 0, double arre[] = 0);
		cl elab1(st& stru, double arre[]);
		cl elab2(cl& cc1, cl cc2);
		void stampa()
		{	int i;
			for (i=0;i<4;i++) cout << s.vv1[i] << ' '; cout << '\t';
			for (i=0;i<4;i++) cout << s.cc[i] << ' '; cout << '\t';
			for (i=0;i<4;i++) cout << s.vv2[i] << ' '; cout << endl;
			for (i=0;i<4;i++) cout << d[i] << ' '; cout << endl;
			cout << endl;
		}
};

Esercizio 1)
Realizzare in Assembler DJGPP le funzioni membro seguenti (scrivere sul file es1.s; tradurre, 
collegare ed eseguire utilizzando i comandi indicati nelle avvertenze):
	#include "cc.h"
	cl::cl(st* p_s, double arre[])
	{	int i;
		if ((p_s!=0) && (arre !=0))
		for (i =0; i<4; i++)
		{	s.vv1[i] = p_s->vv1[i]+5;
			s.cc[i] = ++(p_s->cc[i]);
			s.vv2[i] = p_s->vv2[i];
			d[i] = arre[i];
		}
	}
	cl cl::elab1(st& stru, double arre[])
	{	int i; cl ss;
		for (i=0;i<4;i++) 
		{	ss.s.vv1[i]=s.vv1[i]+stru.vv1[i];  
			ss.s.cc[i]=s.cc[i]+stru.cc[i]-'0';          
			ss.s.vv2[i]=s.vv2[i];
			ss.d[i]=arre[i];
		}
		return ss;
	}

Esercizio 2)
Realizzare in Assembler DJGPP la funzione membro seguente (scrivere sul file es2.s; tradurre, 
collegare ed eseguire utilizzando i comandi indicati nelle avvertenze):
	#include "cc.h"
	cl cl::elab2(cl& cc1, cl cc2)
	{	int i;
		for (i=0;i<4;i++)
		{	if (cc2.s.vv2[i]<cc2.d[i]) cc1.s.vv2[i]=s.vv2[i]+d[i];
				else cc1.s.vv2[i]= s.vv2[i]-d[i];
			if (cc2.d[i]<10) cc1.d[i]=d[i]+15; else cc1.d[i]= 0; 
			cc1.s.vv1[i]=s.vv1[i];
			cc1.s.cc[i]=s.cc[i];
		}
		return cc1;
	}



Soluzioni


Esercizio 1

// file cc.h esistente
#include <iostream.h>
struct st { int vv1[4]; char cc[4]; double vv2[4]; };
class cl 
{      st s;
       double d[4];
public:
       cl(st* p_s = 0, double arre[] = 0);
       cl elab1(st& stru, double arre[]);
       cl elab2(cl& cc1, cl cc2);
       void stampa()
       {		int i;
             	for (i=0;i<4;i++) cout << s.vv1[i] << ' '; cout << '\t';
             	for (i=0;i<4;i++) cout << s.cc[i] << ' '; cout << '\t';
             	for (i=0;i<4;i++) cout << s.vv2[i] << ' '; cout << endl;
             	for (i=0;i<4;i++) cout << d[i] << ' '; cout << endl;
             	cout << endl;
       } 
};

# file es1.s
// es1.s
.text
.globl ___2clP2stPd
___2clP2stPd:
	pushl 	%ebp
	movl 	%esp, %ebp
	subl 	$4, %esp			# spazio per i
	pushl 	%ebx
	pushl 	%ecx
	pushl	%edx
	movl 	8(%ebp), %edx		# indirizzzo oggetto
	cmpl 	$0, 12(%ebp)		# p_s
	je 	finec1
	cmpl 	$0, 16(%ebp)		# arre[]
	je 	finec1
	movl 	$0, -4(%ebp)		# i
ciclo1:	cmpl 	$4, -4(%ebp)
	jl 	avan1
	jmp 	finec1
avan1:	movl 	-4(%ebp), %ecx		# i
	movl 	12(%ebp), %eax		# p_s
	movl 	(%eax,%ecx,4), %ebx	# p_s->vv1[i]
	addl 	$5,%ebx
	movl 	%ebx, (%edx,%ecx,4)	# s.vv1[i]
	incb	16(%eax,%ecx)		# p_s->cc[i]
	movb	16(%eax,%ecx), %bl		# p_s->cc[i]
	movb	%bl, 16(%edx,%ecx)		# s.cc[i]
	movl 	20(%eax,%ecx,8), %ebx	# p_s->vv2[i] primi 4 byte
	movl 	%ebx, 20(%edx,%ecx,8)	# s.vv2[i] primi 4 byte
	movl 	24(%eax,%ecx,8), %ebx
	movl 	%ebx, 24(%edx,%ecx,8)
	movl 	16(%ebp), %eax		# arre[]
	movl 	(%eax,%ecx,8), %ebx	# arre[i] primi 4 byte
	movl 	%ebx, 52(%edx,%ecx,8)	# d[i] primi 4 byte
	movl 	4(%eax,%ecx,8), %ebx
	movl 	%ebx, 56(%edx,%ecx,8)
	incl 	-4(%ebp)
	jmp 	ciclo1
finec1:	movl 	%edx, %eax
	popl 	%edx
	popl 	%ecx
	popl	%ebx
	leave
	ret

.globl _elab1__2clR2stPd
_elab1__2clR2stPd:
	pushl 	%ebp
	movl 	%esp, %ebp
	subl 	$88, %esp			# spazio per i, ss
	pushl 	%ecx
	pushl 	%edi
	pushl 	%esi
	pushl 	$0
	pushl 	$0
	leal 	-88(%ebp), %eax		# indirizzo oggetto da costruire
	pushl 	%eax
	call 	___2clP2stPd
	addl 	$12, %esp
	movl 	$0, -4(%ebp)
ciclo2:	cmpl 	$4, -4(%ebp)
	jl 	avan2
	jmp 	finec2
avan2:	movl 	-4(%ebp), %ecx		# i
	movl 	12(%ebp), %esi		# indirizzo oggetto 
	movl 	16(%ebp), %edi		# indirizzo stru
	movl 	(%esi,%ecx,4), %eax	# s.vv1[i]
	addl 	(%edi,%ecx,4), %eax	# stru.vv1[i]
	movl 	%eax, -88(%ebp,%ecx,4)	# ss.s.vv1[i]
	movb 	16(%esi,%ecx), %al		# s.cc[i]
	addb 	16(%edi,%ecx), %al		# stru.vv1[i]
	subb	$'0', %al
	movb 	%al, -72(%ebp,%ecx)	# ss.s.cc[i]
	movl 	20(%esi,%ecx,8), %eax	# s.vv2[i] primi 4 byte
	movl 	%eax, -68(%ebp,%ecx,8)	# ss.s.vv2[i] primi 4 byte
	movl 	24(%esi,%ecx,8),%eax
	movl 	%eax,-64(%ebp,%ecx,8)
	movl 	20(%ebp), %esi		# arre[]
	movl 	(%esi,%ecx,8), %eax	# arre[i] primi 4 byte
	movl 	%eax, -36(%ebp,%ecx,8)	# ss.d[i] primi 4 byte
	movl 	4(%esi,%ecx,8), %eax
	movl 	%eax, -32(%ebp,%ecx,8)
	incl 	-4(%ebp)
	jmp 	ciclo2
finec2:	movl 	8(%ebp), %eax		# indirizzo risultato
	movl 	%eax, %edi
	leal 	-88(%ebp),%esi		# indirizzo ss
	cld
	movl 	$21, %ecx
	rep
	movsl				# return ss
	popl 	%esi
	popl 	%edi
	popl 	%ecx
	leave
	ret

// file prova1.cpp esistente
#include "cc.h"
int main()
{      	st ss1 = {1,2,3,4,'1','2','3','4',5,6,7,8},
       	ss2 = {11,12,13,14,'a','b','c','d',15,16,17,18};
    	double ard[4] = {21,22,23,24};    
    	st* pp=&ss1;
    	cl cla1(pp, ard), cla2;
    	cla1.stampa();
    	cla2 = cla1.elab1(ss2, ard);
    	cla2.stampa();
}

Risultato dell'esecuzione
6 7 8 9 	2 3 4 5 	5 6 7 8 
21 22 23 24 

17 19 21 23 	c e g i 	5 6 7 8 
21 22 23 24


Esercizio 2

# file es2.s
.text
dieci:	.double 0e10
quind:	.double 0e15
.globl _elab2__2clR2clT0
_elab2__2clR2clT0:
	pushl 	%ebp
	movl 	%esp,%ebp
	subl 	$4, %esp			# spazio per i
	pushl 	%ecx
	pushl 	%esi
	pushl 	%edi
	movl 	12(%ebp), %esi		# indirizzo oggetto
	movl 	$0, -4(%ebp)
ciclo:	cmpl 	$4, -4(%ebp)
	jl 	avanti
	jmp 	finec
avanti:	movl 	-4(%ebp), %ecx
	fldl 	40(%ebp,%ecx,8)		# cc2.s.vv2[i]
	fcompl 	72(%ebp,%ecx,8)		# cc2.d[i]
	fstsw 	%ax
	testw	$0x0100, %ax
	jz	else1			# salta se ST maggiore o uguale
	fldl 	20(%esi,%ecx,8)		# s.vv2[i]
	faddl 	52(%esi,%ecx,8)		# d[i]
	movl 	16(%ebp), %edi		# indirizzo cc1
	fstpl 	20(%edi,%ecx,8)		# cc1.s.vv2[i]
	jmp 	dopo1
else1:	fldl 	20(%esi,%ecx,8)		# s.vv2[i]
	fsubl 	52(%esi,%ecx,8)		# d[i]
	movl 	16(%ebp),%edi		# indirizzo cc1
	fstpl 	20(%edi,%ecx,8)		# cc1.s.vv2[i]
dopo1:	fldl 	72(%ebp,%ecx,8)		# cc2.d[i]
	fcompl	dieci
	fstsw 	%ax
	testw	$0x0100, %ax
	jz	else2			# salta se ST maggiore o uguale
	fldl 	52(%esi,%ecx,8)		# d[i]
	faddl 	quind
	movl 	16(%ebp),%edi		# indirizzo cc1
	fstpl 	52(%edi,%ecx,8)		# cc1.d[i]
	jmp 	dopo2
else2:	movl 	16(%ebp),%edi
	movl 	$0, 52(%edi,%ecx,8)	# cc1.d[i] primi 4 byte
	movl 	$0, 56(%edi,%ecx,8)
dopo2:	movl 	(%esi,%ecx,4), %eax	# s.vv1[i]
	movl 	16(%ebp),%edi		# indirizzo cc1
	movl 	%eax,(%edi,%ecx,4)		# cc1.s.vv1[i]
	movb	16(%esi,%ecx), %al 	# s.cc[i]
	movl 	16(%ebp),%edi		# indirizzo cc1
	movb 	%al,16(%edi,%ecx)		# cc1.s.cc[i]
	incl 	-4(%ebp)
	jmp 	ciclo
finec:	movl 	16(%ebp), %esi		# indirizzo cc1
	movl 	8(%ebp), %eax		# indirizzo risultato
	movl	%eax, %edi
	cld
	movl 	$21, %ecx
	rep
	movsl
	popl 	%edi
	popl 	%esi
	popl 	%ecx
	leave
	ret

// file prova2.cpp esistente
#include "cc.h"
int main()
{      	st ss1 = {1,2,3,4,'1','2','3','4',1,3,5,7},
       	ss2 = {11,12,13,14,'a','b','c','d',15,17,8,9};
    	double ard1[4] = {21,22,23,24};
    	double ard2[4] = {5,6,11,12};    
    	st* pp1=&ss1; st* pp2 = &ss2;
    	cl cla1(pp1, ard1), cla2(pp2, ard2), cla3;
    	cla2 = cla1.elab2(cla3, cla2);
    	cla2.stampa();
}
    
Risultato dell'esecuzione
6 7 8 9 	2 3 4 5 	-20 -19 28 31 
36 37 0 0
